
R version 2.9.0 (2009-04-17)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx",
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+                outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            grid::pushViewport(grid::viewport(width=grid::unit(1, "npc") -
+                               grid::unit(1, "lines"), x=0, just="left"))
+            grid::grid.text(sprintf("help(\"%s\")", nameEx()),
+                            x=grid::unit(1, "npc") + grid::unit(0.5, "lines"),
+                            y=grid::unit(0.8, "npc"), rot=90,
+                            gp=grid::gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> ## at least one package changes these via ps.options(), so do this
> ## before loading the package.
> ## Use postscript as incomplete files may be viewable, unlike PDF.
> ## Choose a size that is close to on-screen devices, fix paper
> ps.options(width = 7, height = 7, paper = "a4", reset = TRUE)
> grDevices::postscript("NeuroImage-Ex.ps")
> 
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> options(warn = 1)
> library('NeuroImage')
Loading required package: abind
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("BrainData-class")
> ### * BrainData-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BrainData-class
> ### Title: Virtual Class "BrainData"
> ### Aliases: BrainData-class dim,BrainData-method numdim,BrainData-method
> ###   space,BrainData-method spacing,BrainData-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> slotNames("BrainData")
[1] "space"
> 
> cl <- getClass("BrainData")
> names(cl@subclasses) 
[1] "BrainList"         "BrainSlice"        "SparseBrainVector"
[4] "TiledBrainVector"  "BrainRegion3D"     "BrainVolume"      
[7] "BrainVector"      
> 
> showClass("BrainData") # output with slots and all subclasses
Virtual Class “BrainData” [package "NeuroImage"]

Slots:
                 
Name:       space
Class: BrainSpace

Known Subclasses: 
Class "BrainList", directly
Class "BrainSlice", directly
Class "SparseBrainVector", directly
Class "TiledBrainVector", directly
Class "BrainRegion3D", directly
Class "BrainVolume", by class "BrainSlice", distance 2
Class "BrainVector", by class "BrainSlice", distance 3
> 
> 
> 
> 
> cleanEx(); nameEx("BrainSlice-class")
> ### * BrainSlice-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BrainSlice-class
> ### Title: Class "BrainSlice" for two-dimensional image data
> ### Aliases: BrainSlice-class indexToVoxel,BrainSlice,index-method
> ###   numdim,BrainSlice-method voxelToIndex,BrainSlice,index,index-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> #space <- BrainSpace(c(50,50))
> #slice <- BrainSlice(rnorm(50*50), space)
> 
> 
> 
> 
> cleanEx(); nameEx("BrainSpace-class")
> ### * BrainSpace-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BrainSpace-class
> ### Title: Class "BrainSpace"
> ### Aliases: BrainSpace-class bounds,BrainSpace-method
> ###   invTrans,BrainSpace-method numdim,BrainSpace-method
> ###   orientation,BrainSpace-method origin,BrainSpace-method
> ###   spacing,BrainSpace-method trans<-,BrainSpace,matrix-method
> ###   trans,BrainSpace-method dim,BrainSpace-method show,BrainSpace-method
> ###   reptime,BrainSpace-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> space <- BrainSpace(Dim=c(64,64,18))
> show(space)
BrainSpace
  Type           : BrainSpace 
  Dimension      : 64 64 18 
  Spacing        : 1  X  1  X  1 
  Origin         : 0  X  0  X  0 
  Index To World : 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 
> trans(space)
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1
> origin(space)
[1] 0 0 0
> 
> 
> 
> 
> cleanEx(); nameEx("IndexLookupVolume-class")
> ### * IndexLookupVolume-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IndexLookupVolume-class
> ### Title: A class used to map from 1d indices to lookup table indices
> ### Aliases: IndexLookupVolume-class initialize,IndexLookupVolume-method
> ###   space,IndexLookupVolume-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("IndexLookupVolume")
Class “IndexLookupVolume” [package "NeuroImage"]

Slots:
                                       
Name:       space    indices        map
Class: BrainSpace    integer    integer
> 
> 
> 
> cleanEx(); nameEx("bounds")
> ### * bounds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bounds
> ### Title: get the real world bounds of an image's data space
> ### Aliases: bounds
> 
> 
> ### ** Examples
> 
> 
> space <- BrainSpace(c(256,256))
> b <- bounds(space)
> 
> 
> 
> 
> cleanEx(); nameEx("index-class")
> ### * index-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: index-class
> ### Title: Virtual Class "index" - Simple Class for image indices
> ### Aliases: index-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("index")
Virtual Class “index” [package "NeuroImage"]

No Slots, prototype of class "NULL"

Known Subclasses: 
Class "numeric", directly
Class "logical", directly
Class "character", directly
Class "integer", by class "numeric", distance 2
Class "signature", by class "character", distance 2
Class "ObjectsWithPackage", by class "character", distance 2
Class "ordered", by class "numeric", distance 4
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.455 0.009 0.464 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
